defaults:
  run:
    shell: "bash"

name: "CI"

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  PYTHONUNBUFFERED: "1"

jobs:
  dev:
    name: "Verify package is installed well"

    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - uses: "./.github/actions/install_python_and_poetry"
        with:
          python-version-file: ".python-version"

      - name: "Install package"
        run: "poetry install"

      - name: "Import package"
        run: "poetry run python3 -c 'import badabump'"

      - name: "Invoke cli via Python"
        run: "poetry run python3 -m badabump --help"

      - name: "Invoke cli via shortcut"
        run: "poetry run badabump --help"

      - name: "Invoke CI cli via Python"
        run: "poetry run python3 -m badabump.ci --help"

      - name: "Invoke CI cli via shortcut"
        run: "poetry run badabump-ci --help"

  test:
    name: "Python ${{ matrix.python-version }}"

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11.0-beta - 3.11"]
        include:
          - python-version: "3.10"
            dev: "true"

    runs-on: "ubuntu-latest"
    continue-on-error: "${{ startsWith(matrix.python-version, '3.11') }}"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - id: "python_and_poetry"
        uses: "./.github/actions/install_python_and_poetry"
        with:
          python-version: "${{ matrix.python-version }}"

      - if: "${{ matrix.dev == 'true' }}"
        uses: "./.github/actions/run_pre_commit"
        with:
          python-version: "${{ steps.python_and_poetry.outputs.python-version }}"

      - name: "Setup git for test needs"
        run: |
          set -euo pipefail

          git config --global init.defaultBranch main
          git config --global user.name badabump-release-bot[bot]
          git config --global user.email badabump-release-bot[bot]@users.noreply.github.com

      - uses: "./.github/actions/run_tox"
        with:
          python-path: "${{ steps.python_and_poetry.outputs.python-path }}"
          python-version: "${{ steps.python_and_poetry.outputs.python-version }}"
          use-coveralls: "${{ matrix.dev }}"
          coveralls-token: "${{ secrets.GITHUB_TOKEN }}"

  package:
    needs: ["test"]

    uses: "./.github/workflows/ci_package.yml"
    secrets:
      pypi-user: "${{ secrets.PYPI_USERNAME }}"
      pypi-password: "${{ secrets.PYPI_PASSWORD }}"

  release:
    needs: ["package"]
    if: "${{ startsWith(github.ref, 'refs/tags/') }}"

    name: "Create GitHub release"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - name: "Fetch git data"
        run: |
          set -euo pipefail

          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          git fetch --prune --unshallow

      - uses: "./.github/actions/install_python_and_poetry"
        with:
          python-version-file: ".python-version"

      - name: "Install package without dev dependencies"
        run: "poetry install --no-dev"

      - id: "badabump"
        name: "Prepare release info"
        run: 'poetry run python3 -m badabump.ci prepare_release "${{ github.ref }}"'

      - name: "Create new release"
        uses: "actions/create-release@v1.1.4"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          tag_name: "${{ steps.badabump.outputs.tag_name }}"
          release_name: "${{ steps.badabump.outputs.release_name }}"
          body: "${{ steps.badabump.outputs.release_body }}"
          prerelease: "${{ steps.badabump.outputs.is_pre_release }}"
