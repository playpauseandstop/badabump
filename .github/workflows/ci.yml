defaults:
  run:
    shell: "bash"

name: "ci"

on:
  push:
    branches: ["master"]
    tags: ["v*"]
  pull_request:
    branches: ["master"]

env:
  COVERALLS_VERSION: "3.0.1"
  DEV_PYTHON_VERSION: "3.9"
  POETRY_VERSION: "1.1.5"
  PYTHON_VERSION: "3.9.4"
  TOX_GH_ACTIONS_VERSION: "2.4.0"
  TOX_VERSION: "3.23.0"
  TWINE_VERSION: "3.4.1"

jobs:
  dev:
    name: "Verify package is installed well"

    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2.3.4"

      - name: "Install Python"
        uses: "actions/setup-python@v2.2.2"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: "Install poetry"
        run: "python3 -m pip install poetry==${{ env.POETRY_VERSION }}"

      - name: "Cache venv"
        uses: "actions/cache@v2.1.4"
        with:
          path: ".venv"
          key: "venv-${{ hashFiles('poetry.lock') }}"

      - name: "Install package"
        run: "poetry install --no-dev"

      - name: "Import package"
        run: "poetry run python3 -c 'import badabump'"

      - name: "Invoke cli via Python"
        run: "poetry run python3 -m badabump --help"

      - name: "Invoke cli via shortcut"
        run: "poetry run badabump --help"

      - name: "Invoke CI cli via Python"
        run: "poetry run python3 -m badabump.ci --help"

      - name: "Invoke CI cli via shortcut"
        run: "poetry run badabump-ci --help"

  test:
    name: "Python ${{ matrix.python-version }}"

    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.3.4"

      - name: "Install Python"
        uses: "actions/setup-python@v2.2.2"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install poetry & other deps"
        run: "python3 -m pip install poetry==${{ env.POETRY_VERSION }} tox==${{ env.TOX_VERSION }} tox-gh-actions==${{ env.TOX_GH_ACTIONS_VERSION }}"

      - name: "Cache venv"
        uses: "actions/cache@v2.1.4"
        with:
          path: ".venv"
          key: "venv-${{ hashFiles('poetry.lock') }}"

      - name: "Install package"
        run: "poetry install --no-dev"

      - name: "Run pre-commit"
        if: "matrix.python-version == env.DEV_PYTHON_VERSION"
        uses: "pre-commit/action@v2.0.0"

      - name: "Setup git for test needs"
        run: |
          git config --global user.name badabump-release-bot[bot]
          git config --global user.email badabump-release-bot[bot]@users.noreply.github.com

      - name: "Run tests"
        run: "python -m tox"

      - name: "Send report to coveralls"
        if: "matrix.python-version == env.DEV_PYTHON_VERSION"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          python3 -m pip install coveralls==${{ env.COVERALLS_VERSION }}
          python3 -m coveralls --service=github

  package:
    needs: ["test"]
    name: "Build & deploy package"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.3.4"

      - name: "Install Python"
        uses: "actions/setup-python@v2.2.2"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: "Install poetry"
        run: "python3 -m pip install poetry==${{ env.POETRY_VERSION }}"

      - name: "Build package"
        run: "poetry build"

      - name: "Check package"
        run: |
          python3 -m pip install twine==${{ env.TWINE_VERSION }}
          python3 -m twine check dist/*

      - name: "Publish package"
        if: "github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')"
        uses: "pypa/gh-action-pypi-publish@v1.4.2"
        with:
          user: "${{ secrets.PYPI_USERNAME }}"
          password: "${{ secrets.PYPI_PASSWORD }}"

  release:
    needs: ["package"]
    if: "startsWith(github.ref, 'refs/tags/')"
    name: "Create GitHub release"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.3.4"

      - name: "Fetch git data"
        run: |
          set -e
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          git fetch --prune --unshallow

      - name: "Install Python"
        uses: "actions/setup-python@v2.2.2"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: "Install poetry"
        run: "python3 -m pip install poetry==${{ env.POETRY_VERSION }}"

      - name: "Cache venv"
        uses: "actions/cache@v2.1.4"
        with:
          path: ".venv"
          key: "venv-${{ hashFiles('poetry.lock') }}"

      - name: "Install badabump"
        run: "poetry install --no-dev"

      - id: "badabump"
        name: "Prepare release info"
        run: "poetry run python3 -m badabump.ci prepare_release \"${{ github.ref }}\""

      - name: "Create new release"
        uses: "actions/create-release@v1.1.4"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          tag_name: "${{ steps.badabump.outputs.tag_name }}"
          release_name: "${{ steps.badabump.outputs.release_name }}"
          body: "${{ steps.badabump.outputs.release_body }}"
          prerelease: "${{ steps.badabump.outputs.is_pre_release }}"
